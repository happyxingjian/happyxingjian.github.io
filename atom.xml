<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>高手坟墓</title>
  
  <subtitle>个人技术学习</subtitle>
  <link href="http://happyxingjian.github.io/atom.xml" rel="self"/>
  
  <link href="http://happyxingjian.github.io/"/>
  <updated>2021-11-06T05:18:35.013Z</updated>
  <id>http://happyxingjian.github.io/</id>
  
  <author>
    <name>邢建</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JUC笔记</title>
    <link href="http://happyxingjian.github.io/2021/11/04/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/JUC%E7%AC%94%E8%AE%B0/"/>
    <id>http://happyxingjian.github.io/2021/11/04/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/JUC%E7%AC%94%E8%AE%B0/</id>
    <published>2021-11-03T17:14:36.000Z</published>
    <updated>2021-11-06T05:18:35.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-JUC-简介"><a href="#Java-JUC-简介" class="headerlink" title="Java JUC 简介"></a>Java JUC 简介</h1><blockquote><p>5.0提供的 java.util.concurrent 包，在此包中增加了在并发编程中很常用的实用工具类，用于定义类似于线程的自定义子系统，包括线程池，异步IO,和轻量级任务框架。提供可调的、灵活的线程池。还提供了设计用于多线程上下文中Collection实现等。</p></blockquote><h1 id="volatile关键字（内存可见性）"><a href="#volatile关键字（内存可见性）" class="headerlink" title="volatile关键字（内存可见性）"></a>volatile关键字（内存可见性）</h1><p>内存可见性问题：当多个线程操作共享数据时，彼此不可见。</p><p>volatile关键字：当多个线程操作共享数据时，可以保证内存中数据可见。相较于sychronized是一种轻量级的同步策略</p><p>注意：<br>1、volatile不具备“<strong>互斥性</strong>”<br>2、volatile不能保证变量的“<strong>原子性</strong>”</p><h1 id="原子变量（CAS算法）"><a href="#原子变量（CAS算法）" class="headerlink" title="原子变量（CAS算法）"></a>原子变量（CAS算法）</h1><p>原子变量：jdk1.5后java.util.concurrent.atomic包下提供常用的原子变量。比如AtomicInteger</p><p>该包下的类的特性:</p><ul><li>类的变量都是volatile修饰，保证内存可见性。</li><li>使用CAS(Compare-And-Swap)算法保证数据的原子性。<ul><li>CAS是硬件对于并发操作共享数据的支持</li><li>CAS包含了3个操作数：内存值V，预估值A,更新值B，当且仅当V==A,V=B,否则不做任何操作。</li></ul></li></ul><h1 id="ConcurrentHashMap（锁分段机制）"><a href="#ConcurrentHashMap（锁分段机制）" class="headerlink" title="ConcurrentHashMap（锁分段机制）"></a>ConcurrentHashMap（锁分段机制）</h1><p>对于多线程操作，介于HashMap与Hashtable之间，内部采用“<strong>锁分段</strong>”机制，代替Hashtable的“独占锁”，进而提高性能。</p><p>默认分为16段Segment。</p><h1 id="CountDownLatch（闭锁）"><a href="#CountDownLatch（闭锁）" class="headerlink" title="CountDownLatch（闭锁）"></a>CountDownLatch（闭锁）</h1><p>它是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或者多个线程一直等待。</p><ul><li>闭锁可以延迟线程的进度直到其到达最终状态。闭锁可以确保某些活动直到其他活动都完成才继续执行。</li><li>确保某个计算在其需要的所有资源都被初始化之后才继续执行。</li><li>确保某个服务在其所依赖的所有服务都已经启动之后才启动</li><li>等待某个操作所有参与者都就绪再继续执行。</li></ul><h1 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h1><p>一、实现Callable接口相较于实现Runable接口的方式：</p><ul><li>可以有返回值</li><li>可以抛出异常</li></ul><p>二、执行Callable方式，需要FutureTask 实现类的支持，用于接收运算后结果。FutureTask是Future接口的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动线程方式</span></span><br><span class="line">ThreadDemo td = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">FutureTask&lt;Integer&gt; result = <span class="keyword">new</span> FutureTask&lt;&gt;(td);</span><br><span class="line"><span class="keyword">new</span> Thread(result).start();</span><br><span class="line">result.get()<span class="comment">//获取线程运算后结果，它会一直等到上述线程执行完毕后才执行get,所以也能实现闭锁。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现Calllable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lock（同步锁）"><a href="#Lock（同步锁）" class="headerlink" title="Lock（同步锁）"></a>Lock（同步锁）</h1><p>用于解决多线程安全问题的方式</p><ul><li>sychronized:隐式锁<ul><li>同步代码块</li><li>同步方法</li></ul></li><li> 同步锁Lock（jdk1.5以后）：显示锁   通过lock()方法上锁，通过unlock()方法释放锁</li></ul><h1 id="Condition控制线程通信"><a href="#Condition控制线程通信" class="headerlink" title="Condition控制线程通信"></a>Condition控制线程通信</h1><ul><li>Condition接口描述了可能会与锁有关联的条件变量。这些变量在用法上与使用Object.wait()访问的隐式监视器类似，但提供了更强大的功能。需要特别指出的是，<strong>单个Lock可能与多个Condition对象关联</strong>。为了避免兼容问题，Condition中的方法名称与对应的Object版本中不同</li><li>在Condition对象中，与wait、notify、notifyAll对应的分别是<strong>await、signal、signalAll</strong>。</li><li>Condition实例实质上被绑定到一个锁上。要为特定Lock获得Condition实例，请使用其newCondition()方法。</li></ul><h1 id="线程八锁"><a href="#线程八锁" class="headerlink" title="线程八锁"></a>线程八锁</h1><h1 id="线程按序交替"><a href="#线程按序交替" class="headerlink" title="线程按序交替"></a>线程按序交替</h1><h1 id="ReadWriteLock（读写锁）"><a href="#ReadWriteLock（读写锁）" class="headerlink" title="ReadWriteLock（读写锁）"></a>ReadWriteLock（读写锁）</h1><ul><li>写写/读写 需要“互斥”</li><li>读读  不需要“互斥”</li></ul><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>线程池：提供了一个线程队列，队列中保存着所有等待状态的线程。避免了创建销毁的额外开销，提高了响应速度。</p><p>线程池体系结构：</p><ul><li>java.util.concurrent.Executor 接口: 负责线程的使用和调度的<strong>根接口</strong>。<ul><li>ExecutorService 子接口:线程池的主要接口<ul><li><strong>ThreadPoolExecutor</strong> 实现类：</li><li>ScheduledExecutorService 子接口：负责线程的调度<ul><li>ScheduledThreadPoolExecutor实现类:继承了ThreadPoolExecutor，实现ScheduledExecutorService</li></ul></li></ul></li></ul></li></ul><p>工具类：Executors</p><ul><li>ExecutorService newFixedThreadPool():创建固定大小的线程池</li><li>ExecutorService newCachedThreadPool():缓存线程池，线程池的数量不固定，可以根据需求自动地更改数量。</li><li>ExecutorService newSingleThreadExecutor():创建只有一个线程的线程池。</li><li>ScheduledExecutorService newScheduledThreadPool():创建固定大小的线程池，可以延迟或者定时地执行任务。</li></ul><h1 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h1><h1 id="ForkJoinPool分支-合并框架-工作窃取"><a href="#ForkJoinPool分支-合并框架-工作窃取" class="headerlink" title="ForkJoinPool分支/合并框架  工作窃取"></a>ForkJoinPool分支/合并框架  工作窃取</h1><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>定义：提供<strong>线程局部</strong>变量，一个线程局部变量在多个线程中分别有独立的值(<strong>副本</strong>)</p><p>特点：简单(开箱即用)、快速(无额外开销)、安全(线程安全)</p><p>场景：多线程场景（资源持有、线程一致性、并发计算、线程安全等场景）</p><p>实现原理：Java中用<strong>哈希表</strong>实现</p><p>应用范围：几乎所有提供多线程特征的语言</p><p>模型：</p><p><img src="https://gitee.com/gaoshoufengmu/pic/raw/master/java%E6%A0%B8%E5%BF%83/ThreadLocal%E6%A8%A1%E5%9E%8B.jpg" alt="ThreadLocal模型"></p><p>ThreadLocal 常用API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;T&gt;() <span class="comment">// 构造函数</span></span><br><span class="line">initialValue() <span class="comment">// 初始化</span></span><br><span class="line">get() / set()   <span class="comment">// 访问器</span></span><br><span class="line">remove()   <span class="comment">// 回收</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-JUC-简介&quot;&gt;&lt;a href=&quot;#Java-JUC-简介&quot; class=&quot;headerlink&quot; title=&quot;Java JUC 简介&quot;&gt;&lt;/a&gt;Java JUC 简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;5.0提供的 java.util.conc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Lombok</title>
    <link href="http://happyxingjian.github.io/2021/11/04/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/Lombok/"/>
    <id>http://happyxingjian.github.io/2021/11/04/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/Lombok/</id>
    <published>2021-11-03T17:14:36.000Z</published>
    <updated>2021-11-04T16:33:04.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是lombok"><a href="#什么是lombok" class="headerlink" title="什么是lombok"></a>什么是lombok</h2><blockquote><p>Lombok项目是一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码。仅五个字符(@Data)就可以替换数百行代码从而产生干净，简洁且易于维护的Java类。</p></blockquote><h2 id="使用lombok"><a href="#使用lombok" class="headerlink" title="使用lombok"></a>使用lombok</h2><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-使用提供注解"><a href="#2-使用提供注解" class="headerlink" title="2.使用提供注解"></a>2.使用提供注解</h3><h4 id="Data注解："><a href="#Data注解：" class="headerlink" title="@Data注解："></a>@Data注解：</h4><p>用在类上，自动给类提供 SET、 GET、 toString、hashCode、equals等方法</p><h4 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter/@Setter:"></a>@Getter/@Setter:</h4><p>用在类上，自动给类提供 SET 或者 GET</p><h4 id="ToString"><a href="#ToString" class="headerlink" title="@ToString:"></a>@ToString:</h4><p> 用在类上，自动给类提供 toString()方法</p><h4 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor:"></a>@AllArgsConstructor:</h4><p>用在类上，自动给类提供 全参构造方法,如提供全参，则记得必须加上无参@NoArgsConstructor</p><h4 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor:"></a>@NoArgsConstructor:</h4><p>用在类上，自动给类提供 无参构造方法</p><h4 id="Accessors-chain-true-："><a href="#Accessors-chain-true-：" class="headerlink" title="@Accessors(chain = true)："></a>@Accessors(chain = true)：</h4><p>用在类上，用来给类的setter方法开启链式调用,其中chain属性决定是否开启链式<br>    user.set(..).set(..).set()……</p><h4 id="slf4j4"><a href="#slf4j4" class="headerlink" title="@slf4j4:"></a>@slf4j4:</h4><p>用在类上,用来快速给类定义一个日志变量</p><p>相当于添加了变量private Logger log = LoggerFactory.getLogger(this.getClass());</p><h2 id="lombok原理"><a href="#lombok原理" class="headerlink" title="lombok原理"></a>lombok原理</h2><p>@Retention(RetentionPolicy.SOURCE),表示在编译成字节码的时候植入代码</p><h2 id="lombok安装"><a href="#lombok安装" class="headerlink" title="lombok安装"></a>lombok安装</h2><p>默认IDEA没有安装lombok插件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是lombok&quot;&gt;&lt;a href=&quot;#什么是lombok&quot; class=&quot;headerlink&quot; title=&quot;什么是lombok&quot;&gt;&lt;/a&gt;什么是lombok&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Lombok项目是一个Java库，它会自动插入编辑器和构建</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://happyxingjian.github.io/2021/11/04/hello-world/"/>
    <id>http://happyxingjian.github.io/2021/11/04/hello-world/</id>
    <published>2021-11-03T16:31:16.841Z</published>
    <updated>2021-11-03T16:31:16.857Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
